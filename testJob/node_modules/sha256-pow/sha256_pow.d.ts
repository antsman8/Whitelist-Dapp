/* tslint:disable */
/* eslint-disable */
/**
* Takes a template vector to be hashed and a target difficulty u256 in hex string form and will mine until it finds a hash that matches the desired difficulty
* @param {Uint8Array} template
* @param {string} target_hex
* @param {BigInt | undefined} offset
* @returns {Promise<ProofOfWork>}
*/
export function mine(template: Uint8Array, target_hex: string, offset?: BigInt): Promise<ProofOfWork>;
/**
* Takes a template vector to be hashed and a target difficulty u256 in hex string form and will mine until it finds a hash that matches the desired difficulty
* @param {Uint8Array} template
* @param {string} target_hex
* @returns {Promise<ProofOfWork>}
*/
export function mine_random(template: Uint8Array, target_hex: string): Promise<ProofOfWork>;
/**
* @param {ProofOfWork} pow
* @param {string} target_hex
* @returns {boolean}
*/
export function verify(pow: ProofOfWork, target_hex: string): boolean;
/**
* @param {Uint8Array} a
* @param {Uint8Array} b
* @returns {Uint8Array}
*/
export function xor(a: Uint8Array, b: Uint8Array): Uint8Array;
/**
*/
export enum POWErrors {
  InvalidTarget,
  CantFindTarget,
}
/**
*/
export class ProofOfWork {
  free(): void;
/**
* @returns {Uint8Array}
*/
  get_hash(): Uint8Array;
/**
* @returns {Uint8Array}
*/
  get_template(): Uint8Array;
/**
* @returns {string}
*/
  get_hash_hex(): string;
/**
* @returns {string}
*/
  get_template_hex(): string;
/**
* @returns {BigInt}
*/
  get_nonce(): BigInt;
/**
* @returns {any}
*/
  to_json(): any;
/**
* @param {any} json_obj
* @returns {ProofOfWork}
*/
  static from_json(json_obj: any): ProofOfWork;
}
